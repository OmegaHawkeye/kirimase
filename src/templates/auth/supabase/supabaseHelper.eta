import { createBrowserClient, createServerClient, type CookieOptions } from '@supabase/ssr'
    import { env } from "<%~ it.formatFilePath(it.shared.init.envMjs, {
      removeExtension: false,
      prefix: "alias",
    }) %>"
    import { cookies } from 'next/headers'
    import { type NextRequest, NextResponse } from "next/server";

    /* Only use this for client components ("use client" at the top of the file) */
    export const createSupabaseBrowserClient = createBrowserClient(
        env.NEXT_PUBLIC_SUPABASE_URL,
        env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    )

    /* Only use this for server only components */
    export const createSupabaseServerComponentClient = () => {
        return createServerClient(
            env.NEXT_PUBLIC_SUPABASE_URL,
            env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
            {
                cookies: {
                    get(name: string) {
                        return cookies().get(name)?.value
                    }
                }
            }
        )
    }

    /* Use this inside Server Actions or Route Handlers bc only in those u can set cookies */
    export const createSupabaseServerActionClient = () => {
        return createServerClient(
            env.NEXT_PUBLIC_SUPABASE_URL,
            env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
            {
                cookies: {
                    get(name: string) {
                    return cookies().get(name)?.value
                    },
                    set(name: string, value: string, options: CookieOptions) {
                    cookies().set({ name, value, ...options })
                    },
                    remove(name: string, options: CookieOptions) {
                    cookies().set({ name, value: '', ...options })
                    }
                }
            }
        )
    }

    /* Use this inside Server Actions or Route Handlers bc only in those u can set cookies */
    export const createSupabaseApiRouteClient = () => {
        return createSupabaseServerActionClient()
    }

    /* Use this inside the middleware */
    export const createSupabaseMiddlewareClient = (request: NextRequest) => {
        // Create an unmodified response
        let response = NextResponse.next({
            request: {
                headers: request.headers
            }
        })

        const supabase = createServerClient(
            env.NEXT_PUBLIC_SUPABASE_URL,
            env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
            {
            cookies: {
                get(name: string) {
                    return request.cookies.get(name)?.value
                },
                set(name: string, value: string, options: CookieOptions) {
                    // If the cookie is updated, update the cookies for the request and response
                    request.cookies.set({
                        name,
                        value,
                        ...options
                    })
                    response = NextResponse.next({
                        request: {
                        headers: request.headers
                        }
                    })
                    response.cookies.set({
                        name,
                        value,
                        ...options
                    })
                },
                remove(name: string, options: CookieOptions) {
                    // If the cookie is removed, update the cookies for the request and response
                    request.cookies.set({
                        name,
                        value: '',
                        ...options
                    })
                    response = NextResponse.next({
                        request: {
                        headers: request.headers
                        }
                    })
                    response.cookies.set({
                        name,
                        value: '',
                        ...options
                    })
                }
            }}
        )
        return { supabase, response }
    }

    export const updateSession = async (request: NextRequest) => {
        try {
            const { supabase, response } = createSupabaseMiddlewareClient(request)
            // This will refresh session if expired - required for Server Components
            // https://supabase.com/docs/guides/auth/server-side/nextjs
            await supabase.auth.getUser()

            return response
        } catch (e) {
            // If you are here, a Supabase client could not be created!
            // This is likely because you have not set up environment variables.
            // Check out http://localhost:3000 for Next Steps.
            return NextResponse.next({
                request: {
                    headers: request.headers
                }
            })
        }
    }